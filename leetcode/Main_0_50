import javax.print.DocFlavor;
import java.util.*;

public class Main_0_50 {

    public static void main(String[] args) {

        int [] arr = new int[]{2,3,1,1,4,2};
        //String s = "()((())";
        //nextPermutation(arr);

//        for (int i = 0;i < arr.length;i++){
//            System.out.print(arr[i]+" ");
//        }
        System.out.println(jump(arr));

    }


    /* 题号 1
    两数之和：[3,2,4] target 6 返回 下标 1 2
    1.暴力 2.一次哈希
     */
    public static int[] twoSum(int[] nums, int target) {
        int result[] = new int[2];
        HashMap<Integer,Integer> map = new HashMap<>();
        for(int i = 0;i < nums.length;i++){
            int temp = target - nums[i];
            if(map.containsKey(temp)){
                result[0] = map.get(temp);
                result[1] = i;
                return result;
            }
            else{
                map.put(nums[i],i);
            }
        }
        throw new IllegalArgumentException("No two sum solution");
    }


    /* 题号 2
    两数相加:两链表相加，输入：(2 -> 4 -> 3) + (5 -> 6 -> 4) 输出：7 -> 0 -> 8
    控制好进位和链表的遍历，注意链表判空的地方
     */
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode head = new ListNode(0);
        ListNode cur = head;
        int addOrNot = 0;
        int sum = 0;
        while (l1 != null || l2 != null){
            int x = l1==null ? 0 :l1.val;
            int y = l2==null ? 0 :l2.val;
            sum = x + y + addOrNot;
            addOrNot = sum / 10;
            cur.next = new ListNode(sum % 10);
            cur = cur.next;
            if(l1!=null){
                l1 = l1.next;
            }
            if(l2!=null){
                l2 = l2.next;
            }
        }
        if(addOrNot > 0){
            cur.next = new ListNode(1);
        }
        return head.next;
    }

    /* 题号 3
    无重复字符的最长子串 如题 输入: "abcabcbb" 输出: 3  解释: 无重复字符的最长子串是 "abc"
    abca 当遇到第二个a 就截断，重新开始，每次判长度
     */
    public int lengthOfLongestSubstring(String s) {
//        int max = 0;
//        StringBuffer sb = new StringBuffer();
//        for(int i = 0;i < s.length();i++){
//            String str = s.substring(i,i+1);
//            if(sb.indexOf(str) == -1){
//                sb.append(str);
//            }
//            else{
//                sb = new StringBuffer(sb.substring(sb.indexOf(str)+1));
//                sb.append(str);
//            }
//            if(max < sb.length()){
//                max = sb.length();
//            }
//        }
//        return max;
        if(s == null || s.length() == 0){
            return 0;
        }
        int max = 1;
        int hash[] = new int [256];
        int left = 0;
        char ch[] = s.toCharArray();
        for(int right = 0;right < s.length();right++){
            hash[ch[right]]++;
            while(hash[ch[right]]!=1){
                hash[ch[left]]--;
                left++;
            }
            max = Math.max(max,right - left + 1);
        }
        return max;
    }

    /* 题号 4
    寻找两个有序数组的中位数 时间复杂度要求 O(log(m + n))
     */
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        //这题hard 原来的做法 时间复杂度达不到
        return 2.0;
    }



    /* 题号 5
    最长回文字串
    暴力法 每个字串判断一下是不是回文串
    中心扩展法，要注意奇偶情况 aba 和cbba bb也是回文
     */
    public static String longestPalindrome(String s) {
//        int max = 0;
//        String res = "";
//        for(int i = 0;i<s.length();i++){
//            for(int j = i;j < s.length();j++){
//                String str = s.substring(i,j+1);
//                if(str.length() > max && isPalindrome(str)){
//                    max = str.length();
//                    res = str;
//                }
//            }
//        }
//        return res;
        int max = 0;
        String res = "";
        for(int i = 0;i<s.length();i++){
            int len1 = expandAroundCenter(s,i,i+1);
            int len2 = expandAroundCenter(s,i,i);
            int len = Math.max(len1,len2);
            if(len > max){
                res = s.substring(i - (len - 1) / 2,i+1+len/2);
                max = res.length();
            }
        }
        return res;
    }

    private static int expandAroundCenter(String s, int left,int right) {
        int L = left, R = right;
        while (L >= 0 && R < s.length() && s.charAt(L) == s.charAt(R)) {
            L--;
            R++;
        }
        return R - L - 1;
    }

    public static boolean isPalindrome(String s){
        String s1=new StringBuffer(s).reverse().toString();
        return s.equals(s1);
    }

    /* 题号 6
    Z字形变换
    用数学公式写代码是最快的方式，思路就是首位行每次寻找下一个输出字符的步长一直是2*（numRows - 1）,其余行每次需要更新步长
     */
    public String convert(String s, int numRows) {
        String result = "";
        if(numRows == 1 || s.length() <= numRows) return s;
        for(int i = 0;i < numRows;i++)
        {
            int start = i;
            int step;
            if((i == numRows-1) || (i == 0))
            {
                step = 2 * (numRows - 1);
                while(start < s.length())
                {
                    result += s.charAt(start);
                    start += step;
                }
            }
            else
            {
                step = 2 * (numRows -1 -i);
                while(start < s.length())
                {
                    result += s.charAt(start);
                    start += step;
                    step = 2* numRows -step-2;
                }
            }

        }

        return result;
    }

    /* 题号 7
    整数反转 java的方法都封装好了
     */
    public int reverse(int x) {
        String s = String.valueOf(x);
        try{
            if(x >= 0){
                String temp = "";
                for(int i = 0;i < s.length();i++){
                    char c = s.charAt(i);
                    temp = c + temp;
                }
                return Integer.parseInt(temp);
            }
            else{
                String temp = "";
                for(int i = 1;i < s.length();i++){
                    char c = s.charAt(i);
                    temp = c + temp;
                }
                return -Integer.parseInt(temp);
            }
        }catch (Exception e){
            return 0;
        }
    }

    /* 题号 8
    字符串转换整数 (atoi) 这种题没啥意思，体现字符串功底
     */
    public int myAtoi(String str) {//8
        if (str == null)
            return 0;
        str = str.trim();
        char[] chars = str.toCharArray();
        if (chars.length == 0)
            return 0;
        char c0 = chars[0];
        if (c0 != '-' && c0 != '+' && !Character.isDigit(c0))
            return 0;
        if (c0 == '-' || c0 == '+') {
            if (chars.length == 1)
                return 0;
            else if (!Character.isDigit(chars[1]))
                return 0;
        }
        StringBuilder sb = new StringBuilder();
        sb.append(c0);
        int i = 1;
        while (i < chars.length){
            if (!Character.isDigit(chars[i]))
                break;
            sb.append(chars[i]);
            i++;
        }
        int res = 0;
        try {
            res = Integer.parseInt(sb.toString());
        } catch (Exception e) {
            if (c0 == '-')
                return Integer.MIN_VALUE;
            else
                return Integer.MAX_VALUE;
        }
        return res;
    }


    /* 题号 9
    回文数 反转判断即可
     */
    public boolean isPalindrome(int x) {//9
        try{
            String s=new StringBuffer(String.valueOf(x)).reverse().toString();
            return s.equals(String.valueOf(x));
        }catch(Exception e){
            return false;
        }
    }

    /* 题号 11
     盛最多水的容器 ，其实就是下标差值和这两个下标最小的那个值的乘积
     输入: [1,8,6,2,5,4,8,3,7] 输出: 49  （8的下标 1 7的下标 9） 49 = 7*7
     暴力和双指针
     */
    public int maxArea(int[] height) {
        int max = 0;
//        for(int i = 0;i < height.length;i++){
//            for(int j = i + 1;j < height.length;j++){
//                if(Math.min(height[i],height[j]) * (j - i) > max){
//                    max = Math.min(height[i],height[j]) * (j - i);
//                }
//            }
//        }
        int left = 0;
        int right = height.length - 1;
        while (left < right){
            if(Math.min(height[left],height[right]) * (right - left) > max){
                max = Math.min(height[left],height[right]) * (right - left);
            }
            if(height[left] < height[right]){
                left++;
            }
            else{
                right--;
            }
        }

        return max;

    }

    /* 题号 12
    整数转为罗马数字
    输入: 58 输出: "LVIII"
    解释: L = 50, V = 5, III = 3.
     */
    public String intToRoman(int num) {
        String ans="";
        String oneArray[]=new String []{"","I","II","III","IV","V","VI","VII","VIII","IX"};
        String twoArray[]=new String []{"","X","XX","XXX","XL","L","LX","LXX","LXXX","XC"};
        String threeArray[]=new String []{"","C","CC","CCC","CD","D","DC","DCC","DCCC","CM"};
        String fourArray[]=new String []{"","M","MM","MMM"};
        int four=num/1000%10;
        int three=num/100%10;
        int two=num/10%10;
        int one=num%10;
        ans=fourArray[four]+threeArray[three]+twoArray[two]+oneArray[one];
        return ans;
    }

    /* 题号 13
    罗马数字转整数
    左边小话就是大减去小 左边大的话就是相加，注意判断当读到最后一位的情况
     */
    public static int romanToInt(String s) {
        int sum=0;
        Map<String, Integer> RomanMap=new HashMap();
        RomanMap.put("I", 1);
        RomanMap.put("V", 5);
        RomanMap.put("X", 10);
        RomanMap.put("L", 50);
        RomanMap.put("C", 100);
        RomanMap.put("D", 500);
        RomanMap.put("M", 1000);

        for(int i = 0; i < s.length();i++){
            if(i < s.length() - 1 && RomanMap.get(String.valueOf(s.charAt(i))) < RomanMap.get(String.valueOf(s.charAt(i + 1)))){
                sum = sum - RomanMap.get(String.valueOf(s.charAt(i)));
            }
            else{
                sum = sum + RomanMap.get(String.valueOf(s.charAt(i)));
            }
        }

        return sum;
    }

    /* 题号 14
    最长公共前缀
    遍历走起,先找个短的，节省下时间，再已第一个串当基准
     */
    public String longestCommonPrefix(String[] strs) {
        if(strs == null || strs.length == 0){
            return "";
        }
        StringBuilder sb = new StringBuilder();
        int minLen = Integer.MAX_VALUE;
        for(String str : strs){
            minLen = Math.min(str.length(),minLen);
        }

        String base = strs[0];
        for(int i = 0;i < minLen;i++){
            char c = base.charAt(i);
            for(int j = 1;j < strs.length;j++){
                if(strs[j].charAt(i) != c){
                    return sb.toString();
                }
            }
            sb.append(c);
        }
        return sb.toString();
    }

    /* 题号 15
    三数之和 [-1,0,1,2,-1,-4]
    先排序后为【-4，-1，-1，0，1，2】，选基准target转化为两数之和，选target的时候重复的直接跳过，再从基准后面的数开始遍历
    想要加和为0，必然在target的后面，二分即可，做好去重和优化
     */
    public static List<List<Integer>> threeSum(int[] nums) {

        List<List<Integer>> results = new ArrayList<>();

        Arrays.sort(nums);
        for(int i = 0;i < nums.length;i++){
            if(i!=0 && nums[i]==nums[i-1])
                continue;
            if(nums[i] > 0){
                break;
            }
            int target = - nums[i];
            int left = i + 1;
            int right = nums.length - 1;
            while(left < right){
                if(nums[left] + nums[right] == target){
                    results.add(Arrays.asList(nums[i],nums[left],nums[right]));
                    while (left < right && nums[left] == nums[left+1]) {
                        left++; // 去重
                    }
                    while (left < right && nums[right] == nums[right-1]){
                        right--; // 去重
                    }
                    left++;
                    right--;
                }
                else if(nums[left] + nums[right] < target){
                    left++;
                }
                else{
                    right--;
                }
            }
        }
        return results;
    }

    /* 题号 16
    最接近的三数之和
    与上题相似，只不过每次比较一下最小差值并更新
     */
    public static int threeSumClosest(int[] nums, int target) {
        if(nums == null || nums.length < 3)
            return 0;
        Arrays.sort(nums);
        int minDiff = Integer.MAX_VALUE;
        int res = 0;
        for(int i = 0;i < nums.length;i++){
            if(i!=0 && nums[i]==nums[i-1])
                continue;
            int left = i + 1;
            int right = nums.length - 1;
            while(left < right){
                int ThreeSum = nums[left] + nums[right] + nums[i];
                if(ThreeSum == target){
                    return target;
                }
                else if(ThreeSum < target){
                    left++;
                    if(Math.abs(ThreeSum - target) < minDiff){
                        minDiff = Math.abs(ThreeSum - target);
                        res = ThreeSum;
                    }
                }
                else{
                    if(Math.abs(ThreeSum - target) < minDiff){
                        minDiff = Math.abs(ThreeSum - target);
                        res = ThreeSum;
                    }
                    right--;
                }
            }
        }
        return res;
    }

    /* 题号 17
    电话号码的字母组合
    输入："23" 输出：["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"].
    这题可以看作是全排列，str数组存a-z 为了与数字 2 3 这种对应，前两个都是空串
    值得注意的是传入的23是String类型 要想和数组下标对齐，需要 - '0'
     */
    public List<String> letterCombinations(String digits) {
        List<String> results = new ArrayList<>();
        if(digits == null || digits.length() == 0){
            return results;
        }
        String[] str = new String[] {"","","abc","def","ghi","jkl","mno","pqrs","tuv","wxyz"};

        StringBuilder sb = new StringBuilder();

        letterCombine(digits,0,str,sb,results);

        return results;
    }

    private void letterCombine(String digits, int index, String[] str, StringBuilder sb, List<String> results) {
        if(index == digits.length()){
            results.add(sb.toString());
            return;
        }
        for(int i = 0;i < str[digits.charAt(index) - '0'].length();i++){
            sb.append(str[digits.charAt(index) - '0'].charAt(i));
            letterCombine(digits,index + 1, str, sb, results);
            sb.deleteCharAt(sb.length() - 1);
        }
    }


    /* 题号18
    四数之和
    注意去重的条件，，保证第一个值能判断，[0,0,0,0] 0
    if(i!=0 && nums[i]==nums[i-1]) 和 if(j > i + 1 && nums[j] == nums[j-1])
     */
    public List<List<Integer>> fourSum(int[] nums, int target) {
        List<List<Integer>> results = new ArrayList<>();
        Arrays.sort(nums);
        for(int i = 0;i < nums.length;i++){
            if(i!=0 && nums[i]==nums[i-1])
                continue;
            int newTarget = target - nums[i];
            for(int j = i+1;j < nums.length;j++){
                if(j > i + 1 && nums[j] == nums[j-1])
                    continue;
                int newstTarget = newTarget - nums[j];
                int left = j + 1;
                int right = nums.length - 1;
                while(left < right){
                    if(nums[left] + nums[right] == newstTarget){
                        results.add(Arrays.asList(nums[i],nums[j],nums[left],nums[right]));
                        while (left < right && nums[left] == nums[left+1]) {
                            left++; // 去重
                        }
                        while (left < right && nums[right] == nums[right-1]){
                            right--; // 去重
                        }
                        left++;
                        right--;
                    }
                    else if(nums[left] + nums[right] < newstTarget){
                        left++;
                    }
                    else{
                        right--;
                    }
                }
            }
        }
        return results;
    }

    /* 题号 19
    删除链表的倒数第N个节点
    快慢指针，注意快指针 到第一个节点，删除的是第一个节，这时候需要直接return了
     */
    public ListNode removeNthFromEnd(ListNode head, int n) {
        if(head == null)
            return null;
        ListNode fast = head;
        ListNode slow = head;
        for(int i = 0;i < n;i++){
            if(fast.next!=null){
                fast = fast.next;
            }
            else{
                return head.next;//到第一个节点啦，删除的是第一个节点
            }
        }
        while (fast.next != null){
            fast = fast.next;
            slow = slow.next;
        }
        slow.next = slow.next.next;
        return head;
    }


    /*题号 20 有效括号
    用到了栈，有匹配的就出栈，没有就入栈，最后判栈空
     */
    public static boolean isValid(String s) {
        Stack<Character> stack = new Stack<>();
        for(int i = 0;i < s.length();i++){
            if(!stack.isEmpty() && isDouble(stack.peek(),s.charAt(i))){
                stack.pop();
            }
            else{
                stack.push(s.charAt(i));
            }
        }
        return stack.isEmpty();
    }

    private static boolean isDouble(Character left, char right) {
        if((left == '(' && right == ')') || (left == '[' && right == ']') || (left == '{' && right =='}')){
            return true;
        }
        return false;
    }

    /* 题号 21 合并两个有序链表、
    有一个没了就直接续上，递归调用
     */
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        if(l1 == null){
            return l2;
        }
        else if(l2 == null){
            return l1;
        }
        ListNode newHead = null;
        if(l1.val < l2.val){
            newHead.val = l1.val;
            newHead.next = mergeTwoLists(l1.next,l2);
        }
        else{
            newHead.val = l2.val;
            newHead.next = mergeTwoLists(l1,l2.next);
        }
        return newHead;
    }

    /* 题号 22 括号生成
    方法一：暴力全排列，再用20题过滤
    方法二：通过对左右括号的计数实现生成有效的括号，左括号数 < n 还可以生成左括号， 而右括号数必须小于左括号数才能生成
     */
    public List<String> generateParenthesis(int n) {
        List<String> list = new ArrayList<>();
        generateParenthesisSub(list,"",0,0,n);
        return list;
    }

    private void generateParenthesisSub(List<String> list, String cur, int left, int right, int n) {
        if(cur.length() == n * 2){
            list.add(cur);
            return;
        }
        if(left < n){
            generateParenthesisSub(list,cur+"(",left+1,right,n);
        }
        if(right < left){
            generateParenthesisSub(list,cur+")",left,right+1,n);
        }
    }

    /* 题号 23 合并k个有序链表
    暴力法 和 最小堆
     */
    public ListNode mergeKLists(ListNode[] lists) {
//        ArrayList<ListNode> arr = new ArrayList<>();
//        for(int i = 0;i < lists.length;i++) {
//            ListNode node = lists[i];
//            while(node != null) {
//                arr.add(node);
//                node = node.next;
//            }
//        }
//        arr.sort(new Comparator<ListNode>() {
//            public int compare(ListNode o1, ListNode o2) {
//                return o1.val - o2.val;
//            }
//        });
//
//
//        ListNode head = new ListNode(1);
//        ListNode cur = head;
//        for(int i = 0;i < arr.size();i++){
//            cur.next = arr.get(i);
//            cur = cur.next;
//        }
//        return head.next;
        if (lists == null || lists.length == 0)
            return null;
        ListNode dummy = new ListNode(-1);
        ListNode cur = dummy;
        PriorityQueue<ListNode> queue =
                new PriorityQueue<>(lists.length, new Comparator<ListNode>() {
                    public int compare(ListNode o1, ListNode o2) {
                        return o1.val - o2.val;
                    }
                });

        for (ListNode list : lists) {
            if (list != null)
                queue.add(list);
        }
        while (!queue.isEmpty()) {
            cur.next = queue.poll();
            cur = cur.next;
            if (cur.next != null)
                queue.add(cur.next);
        }
        return dummy.next;
    }

    /* 题号24 两两交换链表中的节点
    每次看见这题就模拟一下吧、
    temp = fast = 1             temp = 3        temp = 3        temp = null
    cur.next = 2                cur.next = 1    cur.next = 4    cur.next = 3
    cur = 2                     cur = 1         cur = 4         cur = 3
    fast = 1                    fast = 3        fast = 3        fast = null
     */
    public ListNode swapPairs(ListNode head) {
        ListNode dummyHead=new ListNode(0);
        if(head==null)
            return head;
        if(head.next==null)//如果只有一个节点，直接返回这个节点
            return head;
        dummyHead.next=head;
        ListNode fast=head;
        ListNode cur=dummyHead;

        while(fast!=null&&fast.next!=null){
            ListNode temp=cur.next;
            cur.next=fast.next;
            fast.next=temp;
            fast=fast.next;
            cur=cur.next;
        }
        return dummyHead.next;
    }

    /* 题号26 删除排序数组中的重复项
    原地删除的写法，只有不等于的时候index才移动，index来保存去重后数组的正确下标
     */
    public int removeDuplicates(int[] nums) {
        //{0,0,1,1,1,2,2,3,3,4};
        if(nums.length==0)return 0;
        int index=0;
        for(int i=1;i<nums.length;i++){
            if(nums[index]!=nums[i]){
                index++;
                nums[index]=nums[i];
            }
        }
        return index+1;
    }

    /* 题号 27 移除元素
    和上面的差不多
     */
    public int removeElement(int[] nums, int val) {
        if(nums.length==0)return 0;
        int index=0;
        for(int i=0;i<nums.length;i++){
            if(nums[i]!=val){
                nums[index]=nums[i];
                index++;
            }
        }
        return index;
    }

    /* 题号 28 实现str()
    输入: haystack = "hello", needle = "ll" 输出: 2
    想办法找准对齐位置
     */
    public static int strStr(String haystack, String needle) {
        if(needle.length() == 0){
            return 0;
        }
        if(needle.length() > haystack.length()){
            return -1;
        }
        char c1[] = haystack.toCharArray();
        char c2[] = needle.toCharArray();

        int len = c1.length - c2.length + 1;
        for(int i = 0;i < len;i++){
            for(int j = 0;j < c2.length;j++){
                if (c1[i + j] != c2[j]) {
                    break;
                }
                if (j == c2.length - 1) {
                    return i;
                }
            }

        }
        return -1;
    }

    /* 题号 29 两数相除
    -2147483648 -1
     */
    public static int divide(int dividend, int divisor) {
        return -1;
    }

    /* 题号 31
    下一个排列
    1,5,8,4,7,6,5,3,1  -> 1 5 8 5 1 3 4 6 7
    从最后往前找一个 不符合递增 4  再从后往前找个刚刚大于4的5 4和5交换 然后反转4以后的区域
     */
    public static void nextPermutation(int[] nums) {
        int index = -1;
        for(int i = nums.length-1;i > 0;i--){
            if(nums[i] > nums[i-1]){
                index = i - 1;
                break;
            }
        }
        if(index>-1){
            for(int j = nums.length-1;j > index;j--){
                if(nums[j] > nums[index]){
                    swap(nums, index, j);
                    break;
                }
            }
        }
        reverseArray(nums, index + 1);
    }
    private static void reverseArray(int[] nums, int index) {
        // TODO Auto-generated method stub
        int i=index;int j=nums.length-1;
        while(i<j){
            swap(nums, i, j);
            i++;j--;
        }
    }
    private static void swap(int[] nums, int index, int j) {
        // TODO Auto-generated method stub
        int temp=nums[index];
        nums[index]=nums[j];
        nums[j]=temp;
    }

    /* 题号32 最长有效括号
    (() 和 ()) 从左到右 从右到左 都要看一遍 以左边为例 计数'('的数量，当是')'要看左括号的数量，有则+2，
    没有重新计数，当左括号用完才算有效，可以更新max
     */
    public static int longestValidParentheses(String s) {
        if(s.length() == 0){
            return 0;
        }
        int max = 0;
        int leftCount = 0;
        int leftMax = 0;
        int rightCount = 0;
        int rightMax = 0;
        char []ch = s.toCharArray();
        for(int i = 0;i < s.length();i++){
            if(ch[i] == '(') {
                leftCount++;
            }
            else {
                if(ch[i] == ')' && leftCount > 0){
                    leftCount--;
                    leftMax += 2;
                    if(leftMax > max && leftCount == 0){
                        max = leftMax;
                    }
                }
                else{
                    leftCount = 0;
                    leftMax = 0;
                }
            }
        }
        for(int i = s.length() - 1;i >=0;i--){
            if(ch[i] == ')'){
                rightCount++;
            }
            else {
                if(ch[i] == '(' && rightCount > 0){
                    rightCount--;
                    rightMax += 2;
                    if(rightMax > max && rightCount == 0){
                        max = rightMax;
                    }
                }
                else{
                    rightCount = 0;
                    rightMax = 0;
                }
            }
        }
        return max;
    }
    /* 题号 33 搜索旋转排序数组
    [4,5,6,7,0,1,2], target = 0 [4 5 6 0 1 2 3], target = 1
     */
    public static int search(int[] nums, int target) {
        if (nums == null || nums.length == 0)
            return -1;
        int left = 0;
        int right = nums.length - 1;
        while (left < right){
            System.out.println(nums[left] + " "+nums[right]);
            int mid = (left + right) / 2;
            if(nums[mid] == target){
                return mid;
            }
            else if(nums[left] <= nums[mid]){
                if(nums[mid] > target && nums[left] <= target){//target 在 left 和 mid 的有序区间内
                    right = mid - 1;
                }
                else{
                    left = mid + 1;
                }
            }
            else if(nums[mid] < nums[right]){
                if(nums[mid] < target && nums[right] >= target){//target 在 mid 和 right 的有序区间内
                    left = mid + 1;
                }
                else{
                    right = mid - 1;
                }
            }
        }
        return nums[left] == target ? left : -1;
    }

    /* 题号 34 在排序数组中查找元素的第一个和最后一个位置
    二分
     */
    public int[] searchRange(int[] nums, int target) {
        int a[]=new int[]{-1,-1};
        if(nums.length==0)return a;
        int left=0;
        int right=nums.length-1;
        int index=0;
        while(left<=right){
            int mid=(left+right)/2;
            if(target == nums[mid])
            {
                index = mid;
                break;
            }
            if(target > nums[mid])
            {
                left = mid + 1;
            }
            if(target < nums[mid])
            {
                right = mid - 1;
            }
        }
        for(int i=index;i>=0;i--){
            if(nums[i]==target){
                a[0]=i;
            }
        }
        for(int j=index;j<nums.length;j++){
            if(nums[j]==target){
                a[1]=j;
            }
        }
        return a;
    }

    /* 题号 35 搜索插入位置
    输入: [1,3,5,6], 7 输出: 4
    二分
     */
    public static int searchInsert(int[] nums, int target) {
        int index= Arrays.binarySearch(nums,target);
        if(index<0){
            return -index-1;
        }
        else {
            return index;
        }
    }

    /* 题号 36 有效的数独
    每行每列每3*3 数字只能出现一次 分别用bitRow bitCol bitRange 存每个数字的出现次数
     */
    public boolean isValidSudoku(char[][] board) {
        for(int i = 0;i < 9;i++){
            int [] bitRow = new int[9];
            int [] bitCol = new int[9];
            int [] bitRange = new int[9];
            for(int j = 0; j < 9;j++){
                if(board[i][j] != '.'){
                    if(bitRow[board[i][j] - '1'] == 1){
                        return false;
                    }
                    else{
                        bitRow[board[i][j] - '1'] = 1;
                    }
                }
                if(board[j][i] != '.'){
                    if(bitCol[board[j][i] - '1'] == 1){
                        return false;
                    }
                    else{
                        bitCol[board[j][i] - '1'] = 1;
                    }
                }
                int rowIndex = 3 * (i/3) + j/3;
                int colIndex = 3 * (i%3) + j%3;
                if(board[rowIndex][colIndex]!='.'){
                    if(bitRange[board[rowIndex][colIndex] -'1']==1){
                        return false;
                    }
                    else{
                        bitRange[board[rowIndex][colIndex] -'1']=1;
                    }
                }
            }
        }
        return true;
    }

    /* 题号 38
    报数 num：1 一个1 num：2(基于上一个) 是 1个1 11 num：3 2个1 21 nums：4 1个2，1个1 1211
    递归写法，从1开始
     */
    public String countAndSay(int n) {
        return countAndSaySub("1",n);
    }

    public String countAndSaySub(String s, int n) {
        if(n == 1){
            return s;
        }
        else{
            StringBuilder sb = new StringBuilder();
            int i = 0;
            while (i < s.length()){
                int count = 1;
                while (i < s.length()-1 && s.charAt(i) == s.charAt(i+1)){
                    count++;
                    i++;
                }
                sb.append(Integer.toString(count)+s.charAt(i));
                i++;
            }
            s = sb.toString();
        }
        return countAndSaySub(s,n-1);
    }

    /* 题号39 组合总和
    candidates = [2,3,6,7], target = 7,结果 [7],[2,2,3] 回溯法
     */
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> results = new ArrayList<>();
        List<Integer> list = new ArrayList<>();
        int index = 0;
        Arrays.sort(candidates);
        combinationSumSub(candidates,target,index,list,results);
        return results;
    }

    private void combinationSumSub(int[] candidates, int target, int index, List<Integer> list, List<List<Integer>> results) {
        if(target < 0){
            return;
        }
        if(target == 0){
            results.add(new ArrayList<>(list));
            return;
        }
        else{
            for(int i = index;i < candidates.length && candidates[i]<=target;i++){
                list.add(candidates[i]);
                combinationSumSub(candidates,target - candidates[i],i,list,results);//因为元素可以重复，index不用+1
                list.remove(list.size() - 1);
            }
        }
    }

    /* 题号40 组合总和II
    每个数字在每个组合中只能使用一次。candidates =[10,1,2,7,6,1,5] target = 8,结果 [[1,2,5],[1,7],[1,1,6],[2,6]] 回溯法+去重
     */
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        List<List<Integer>> results = new ArrayList<>();
        List<Integer> list = new ArrayList<>();
        int index = 0;
        Arrays.sort(candidates);
        combinationSum2Sub(candidates,target,index,list,results);
        return results;
    }

    private void combinationSum2Sub(int[] candidates, int target, int index, List<Integer> list, List<List<Integer>> results) {
        if(target < 0){
            return;
        }
        if(target == 0){
            results.add(new ArrayList<>(list));
            return;
        }
        else{
            for(int i = index;i < candidates.length && candidates[i]<=target;i++){
                if(i > index && candidates[i-1] == candidates[i])//去重
                    continue;
                list.add(candidates[i]);
                combinationSum2Sub(candidates,target - candidates[i],i+1,list,results);//这里是i+1了
                list.remove(list.size() - 1);
            }
        }
    }

    /* 题号 41 缺失的第一个正数
    输入: [3,4,-1,1] 输出: 2 这题要注意几种情况： 4 5 6 全都大于1的，1 1 2 2 3 有重复的 -5 -1 光有负数的
     */
    public static int firstMissingPositive(int[] nums) {
        if(nums.length == 0)return 1;
        Arrays.sort(nums);
        int index = 1;
        //[1,1,2,2,2,2,3]
        for(int i = 0;i < nums.length;i++){
            if(i < nums.length -1 && nums[i] == nums[i+1])
                continue;
            if(nums[i] > 0){
                if(nums[i] != index){
                    return index;
                }
                index++;
            }
        }
        if(index == 1){
            return 1;
        }
        else{
            return nums[nums.length-1] + 1;
        }
    }

    /* 题号42 接雨水
    输入: [0,1,0,2,1,0,1,3,2,1,2,1] 输出: 6 1+4+1 按俄罗斯方块想象，那种漏斗的地方可以接雨水
                *
         *      * *   *
      *  * *  * * * * * *
      双指针 维护 left_max right_max 积水高度总是依赖于那个短板 两者汇合的地方肯定是最高点，左指针变化的时候，res 相加 左最大 减去 当前值
     */
    public static int trap(int[] height) {
        if(height.length == 0)
            return 0;
        int left = 0;
        int right = height.length - 1;
        int left_max = 0;
        int right_max = 0;
        int res = 0;
        while (left < right){
            if(height[left] < height[right]){
                if(height[left] >= left_max){
                    left_max = height[left];
                }
                else{
                    res += left_max - height[left];
                }
                ++left;
            }
            else{
                if(height[right] >= right_max){
                    right_max = height[right];
                }
                else{
                    res += right_max - height[right];
                }
                --right;
            }
        }
        return res;
    }

    /* 题号 43 字符串相乘
    模拟 1234 * 25 的过程
    value   0    1    2    3    4    5
    num1              1    2    3    4
    num2                        2    5
                      5    10   15   20
                 2    4    6    8
    处理进位前   2    9    16   23   20
    处理进位后   3    0    8    5    0
     */
    public String multiply(String num1, String num2) {
        int len1 = num1.length()-1;
        int len2 = num2.length()-1;
        if(len1 < 0 || len2 < 0)
            return "";
        int value[] = new int [len1+len2+2];
        for(int i = len1;i >= 0;i--){
            for(int j = len2;j >= 0;j--){
                value[i+j+1] = value[i+j+1] + (num1.charAt(i)-'0') * (num2.charAt(j)-'0');
            }
        }
        int add = 0;
        for(int i = value.length - 1;i >= 0;i--){
            value[i] = value[i] + add;
            add = value[i] / 10;
            value[i] = value[i] % 10;
        }

        int index = 0;
        while (index < value.length - 1  && value[index] == 0){
            index++;
        }
        StringBuilder sb = new StringBuilder();
        for(int i = index; i < value.length;i++){
            sb.append(value[i]);
        }
        return sb.toString();
    }

    /* 题号45 跳跃游戏II
    输入: [2,3,1,1,4] 输出: 2 解释: 跳到最后一个位置的最小跳跃数是 2。
    更新最远能到达的位置和当前位置，when在当前位置能到达的最远位置 > len 跳出 when 来到最远位置更新步数和最远位置（才能继续循环）
     */
    public static int jump(int[] nums) {
        if(nums.length <= 1)
            return 0;
        int count = 0;
        int maxReach = 0;//最远能到达的位置
        int curPos = 0;//当前位置
        for(int i = 0;i <= maxReach;i++){
            curPos = Math.max(curPos,i + nums[i]);
            if(curPos >= nums.length - 1){
                return count + 1;
            }
            if(i == maxReach){
                count++;
                maxReach = curPos;
            }
        }
//        while (curPos < nums.length - 1){
//            count++;
//            maxReach = curPos;
//            for(int i = 0;i <= maxReach;i++){
//                curPos = Math.max(curPos,i + nums[i]);
//            }
//        }
        return count;
    }

    /* 题号 46 全排列
    回溯
     */
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> results = new ArrayList<>();
        int len = nums.length;
        permuteSub(nums,0,len,results);
        return results;
    }

    private void permuteSub(int[] nums, int index, int len, List<List<Integer>> results) {
        if(index == len - 1){
            List<Integer> list = new ArrayList<>();
            for(int i = 0;i < len;i++){
                list.add(nums[i]);
            }
            results.add(list);
            return;
        }
        for(int i = index;i < len;i++){
            swap(nums,i,index);
            permuteSub(nums,index+1,len,results);
            swap(nums,i,index);
        }
    }

    /* 题号47 全排列II
    给定一个可包含重复数字的序列，返回所有不重复的全排列。 加重过滤
     */
    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> resultList = new ArrayList<>();
        int len = nums.length;
        Arrays.sort(nums);

        permuteOne1(nums,0,len,resultList);

        return resultList;
    }
    private static void permuteOne1(int[] nums, int start, int len, List<List<Integer>> resultList) {
        if(start == len-1){
            List<Integer> result = new ArrayList<>();
            for(int j = 0;j < len;j++){
                result.add(nums[j]);
            }
            resultList.add(result);
            return;
        }
        for(int i = start;i < len;i++){
            if (isSame(nums, start, i)) {
                swap(nums,start,i);
                permuteOne1(nums, start+1,len, resultList);
                swap(nums,start,i);
            }
        }
    }
    public static boolean isSame(int[] nums, int begin, int end){
        for (int i = begin; i < end; i++)
            if (nums[i] == nums[end])
                return false;
        return true;
    }

    /* 题号48 旋转图像
    将图像顺时针旋转 90 度。
    先对角线交换，然后左右互换
     */
    public void rotate(int[][] matrix) {
        int len = matrix.length;
        for(int i = 0;i < len;i++){
            for(int j = i + 1;j < len;j++){
                int temp = matrix[i][j];
                matrix[i][j] = matrix[j][i];
                matrix[j][i] = temp;
            }
        }
        int left = 0;
        int right = len - 1;
        while (left < right){
            for(int row = 0;row < len;row++){
                int temp = matrix[row][left];
                matrix[row][left] = matrix[row][right];
                matrix[row][right] = temp;
            }
            left++;
            right--;
        }
    }

    /* 题号49 字母异位词分组
    利用hashmap key是重排序后的string，同key的在放入map中的value中（也就是list）中
     */
    public List<List<String>> groupAnagrams(String[] strs) {
        if (strs.length == 0)
            return new ArrayList();
        Map<String, List> map = new HashMap<String, List>();

        for(String str : strs){
            char c[] = str.toCharArray();
            Arrays.sort(c);
            String key = c.toString();
            if(!map.containsKey(key)){
                map.put(key,new ArrayList());

            }
            map.get(key).add(str);
        }

        return new ArrayList(map.values());
    }


    /* 题号 50 Pow(x, n)
    分治思想 2^4 = 2^2 * 2^2
     */
    public double myPow(double x, int n) {
        if(n < 0)
            return 1 / pow(x,-n);
        else
            return pow(x,n);
    }

    private static double pow(double x, int n) {
        if(n == 0){
            return 1;
        }
        double half = pow(x,n/2);
        if(n % 2 == 0){
            return half * half;
        }
        else{
            return half * half * x;
        }
    }


    public class TreeNode {
      int val;
      TreeNode left;
      TreeNode right;
      TreeNode(int x) { val = x; }
     }


    public class ListNode {
        int val;
        ListNode next;
        ListNode(int x) { val = x; }
    }
    public static class BTY {
        int val;
        BTY child;

        BTY(int x) {
            val = x;
        }
    }
}
